# Python Functions {{{1 #

global !p
def pathToPackage(p, f):
    index = p.find('java/')
    count = 5
    if index == -1:
        index = p.find('src/')
        count = 4
    end = p.find(f) - 1
    return p[index+count:end].replace('/','.')

import re

def classHeader(fn):
    return 'package ' + pathToPackage(path, fn) + '\n\npublic class ' + fn[0:fn.find('.')] + ' {'

def classFooter(fn):
    return '}'

def snakecase(f, pattern=r'([A-Z])'):
    f = re.sub(pattern, lambda pat: "_" + pat.group(1).lower(), f)
    if (f[0] == '_'):
        f = f[1:]
    return f

def idFromName(f):
    f = f[0:f.find('.')]
    f = snakecase(f)
    if f.endswith("_activity"):
        f = "activity_" + f.replace("_activity", "")
    elif f.endswith("_fragment"):
        f = "frag_" + f.replace("_fragment", "")

    return f

def upperFirst(name):
    return name[0:1].upper() + name[1:]

member = r'(\s*)(?:private|public)\s+([\w\[\]]+)\s+(\w+)(?:\s+=.*)?;'

def psf(pat):
    return pat.group(1) + "public static final String " + snakecase(pat.group(3)).upper() + " = \"" + snakecase(pat.group(3)) + "\";"

def getterSetter(pat):
    s = '''
    public {2} get{0}() {{
        return {1};     
    }}

    public void set{0}({2} {3}) {{
        {1} = {3};
    }}
    '''

    var = pat.group(3)
    name = var
    hasM = re.compile('m[A-Z]')
    useThis = True
    if hasM.match(var) is not None:
        useThis = False
        name = name[1:2].upper() + name[2:]
    if useThis:
        return s.format(name[0:1].upper() + name[1:], "this."+name, pat.group(2), name);
    
    return s.format(name, var, pat.group(2), "a"+name);

def memberTo(f, mod):
    f = re.sub(member, mod, f, flags=re.M)
    return f

endglobal

# 1}}} #

# Java Basics {{{1 #

snippet b "Builder"
public $1Builder $2(${3:String} $2) {
    this.$2 = $2;
    return this;
}

$0
endsnippet

priority 1

snippet pack "Full Package" b
package `!p snip.rv = pathToPackage(path, fn)`;
endsnippet

priority -1
snippet pack "Import Package" 
`!p snip.rv = pathToPackage(path, fn)`.$1;
endsnippet

snippet val "Content Value insertion" b
${1:values}.put(${2:ID}, m${2/(.)(.*)/\U$1\E\L$2\E/g});
endsnippet

snippet psf "Public Static Final" !b
public static final ${1:String} ${2:NAME} = ${2/(.*)/"\L$1\E"/g};
endsnippet

snippet singleton "Singleton Object" !b 
package `!p snip.rv = pathToPackage(path, fn)`;

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} {
    private static $1 sInstance = null;

    private $1() { }

    public static $1 getInstance($2) {
        if (sInstance == null) {
            sInstance = new $1();
        }

        return sInstance;
    }

    $0
}
endsnippet

# 1}}} #

# Android Helpers {{{1 #

snippet log "Android Log" !b
Timber.${1:d}($2);
endsnippet

snippet fv "Find View" !b
m$1 = ($2) findViewById(R.id.${1/(.*)/\L$1\E/g});
endsnippet

snippet oAR "On Activity Results" b
@Override 
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    // Check which request we're responding to 
    if (resultCode == RESULT_OK) {
        // Make sure the request was successful 
        if (requestCode == $1) {
            $0
        } 
    } 
} 
endsnippet

snippet app "Android Application" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.app.Application;
import android.content.Context;
import android.os.Build;

public class `!p snip.rv=fn[0:fn.find('.')]` extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        $0
    }
}
endsnippet

snippet act "Android Activity" b!
package `!p snip.rv = pathToPackage(path, fn)`;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.*;

import timber.log.Timber;

public class `!p snip.rv=fn[0:fn.find('.')]` extends ${1:AppCompatActivity} {

    @Override
    public void onCreate(Bundle savedState) {
        super.onCreate(savedState);
        setContentView(R.layout.${2:`!p snip.rv=idFromName(fn)`});

        $0
    }
}
endsnippet

snippet frag "Fragment" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.app.*;
import android.content.*;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.widget.*;
import android.view.*;

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} extends ${2:Fragment} {

    public static $1 newInstance($3) {
        $1 frag = new $1();

        Bundle args = new Bundle();
        frag.setArguments(args);

        return frag;
    }

    @Override
    public View onCreateView(LayoutInflater aInflater, ViewGroup aContainer, Bundle aSavedState) {
        super.onCreateView(aInflater, aContainer, aSavedState);
        View result = aInflater.inflate(R.layout.${4:`!p snip.rv=idFromName(fn)`}, aContainer, false);
        ButterKnife.bind(this, result);

        $0

        return result;
    }

    @Override 
    public void onDestroyView() {
        super.onDestroyView();
        ButterKnife.unbind(this);
    }
}
endsnippet

snippet frag "Dialog Fragment" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.*;
import android.os.Bundle;
import android.support.v4.app.*;
import android.widget.*;
import android.view.*;

import `!p snip.rv = pathToPackage(path, fn)`.R;

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} extends Fragment {

    public static $1 newInstance($2) {
        $1 frag = new $1();

        Bundle args = new Bundle();
        frag.setArguments(args);

        return frag;
    }

    @Override
    public View onCreateView(LayoutInflater aInflater, ViewGroup aContainer, Bundle aSavedState) {
        super.onCreateView(aInflater, aContainer, aSavedState);
        View result = aInflater.inflate(R.layout.${3:`!p snip.rv=idFromName(fn)`}, null);

        $0

        return result;
    }

    @Override
    public Dialog onCreateDialog(Bundle aSavedState) {
        return new AlertDialog.Builder(getActivity())
            ${4:.setView(getView())}
            $5.setPositiveButton(R.string.add, mListener)
            .setNegativeButton(R.string.cancel_btn, mListener)
            .create();
    }

    private DialogInterface.OnClickListener mListener = new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface aDialog, int aWhich) {
            switch (aWhich) {
                case Dialog.BUTTON_POSITIVE:$6
                case Dialog.BUTTON_NEGATIVE:$7
                default:
                    aDialog.dismiss();
                    break;
            }
        }
    };
}
endsnippet

snippet lc "Loader.Callbacks" !b
public static class ${1:CustomCallbacks} implements Loader.Callbacks{
    public Loader<${2:Cursor}> onCreateLoader(int id, Bundle args) {
        return new ${3:$2}Loader(getActivity(), ${4:uri}, ${5:projection},
            ${6:selection}, ${7:args}, ${8:order});
    }

    public void onLoadFinished(Loader<$2> loader, $2 data) {
        $9
    }

    public void onLoaderReset(Loader<$2> loader) {
        $10
    }
}
endsnippet

snippet loader "Custom Async Task Loader" !b

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} extends AsyncTaskLoader<$2> {
    final ContentObserver mObserver;
    Context mContext;
    int mId;
    
    public $1(final Context aContext, final int aId) {
        super(aContext);

        mContext = aContext;
        mId = aId;

        mObserver = new ContentObserver(new Handler()) {
            public void onChange(boolean aBool) {
                forceLoad();
            }
        };
    }

    @Override
    public void onStartLoading() {
        forceLoad();
    }

    public $2 loadInBackground() {
        Cursor c = mContext.getContentResolver().query(CONTENT_URI, null, 
            null, null, null);

        mContext.getContentResolver().registerContentObserver(CONTENT_URI, true, mObserver);

        $2 result = new $2();

        if (c.moveToNext()) {
            $3
        }

        c.close();

        return result; 
    }
}
endsnippet

snippet receiver "Broadcast Receiver" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.content.Context;
import android.content.Intent;

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} extends BroadcastReceiver {

    @Override 
    public void onReceive(Context context, Intent intent) { 
        $0
    } 

}
endsnippet

snippet watcher "TextWatcher" w
new TextWatcher() {
    public void beforeTextChanged(CharSequence aString, int aStart, int aCount, int aAfter) {$1};
    public void onTextChanged(CharSequence aString, int aStart, int aBefore, int aCount) {$2};
    public void afterTextChanged(Editable aString) {$3};

}$0
endsnippet

snippet watcher "TextWatcher" b!
TextWatcher ${1:watcher} = new TextWatcher() {
    public void beforeTextChanged(CharSequence aString, int aStart, int aCount, int aAfter) {$2};
    public void onTextChanged(CharSequence aString, int aStart, int aBefore, int aCount) {$3};
    public void afterTextChanged(Editable aString) {$4};

};$0
endsnippet

snippet adapter "CursorAdapter" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.CursorWrapper;
import android.graphics.drawable.AnimationDrawable;
import android.os.Build;
import android.support.v4.app.FragmentActivity;
import android.support.v4.widget.CursorAdapter;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.*;
import android.widget.*;

import `!p snip.rv = pathToPackage(path, fn)`.R;

public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} extends CursorAdapter
    implements AdapterView.OnItemClickListener, AbsListView.OnScrollListener {

    private LayoutInflater mInflater;

    public $1(Context aContext, Cursor aCursor)
    {
        super(aContext, aCursor, false);
    }

    @Override
    public View newView(Context aContext, Cursor aCursor, ViewGroup aParent) {
        ViewHolder viewHolder = new ViewHolder();
        View view = mInflater.inflate(layout, null);
        
        ${2:viewHolder.title = (TextView) view.findViewById(R.id.title);}

        view.setTag(viewHolder);
        return view;
    }

    @Override
    public void bindView(View aView, Context aContext, Cursor aCursor) {
        ViewHolder viewHolder = (ViewHolder) aView.getTag();
        $3
    }

    public void onItemClick(AdapterView aListView, View aView, int aPosition, long aId) {
        $1 adapter = ($1) aListView.getAdapter();
        CursorWrapper cursor = (CursorWrapper) adapter.getItem(aPosition);

        if (cursor.moveToPosition(aPosition)) {
            $5
        }
    }

    private static class ViewHolder {
        ${4:TextView title};
    }
}
endsnippet

snippet parcel "Parcelable" !b
private ${1:`!p snip.rv=fn[0:fn.find('.')]`}(Parcel aIn) {
    $2
}

public static final Parcelable.Creator<$1> CREATOR = new Parcelable.Creator<$1>() {
    public $1 createFromParcel(Parcel aIn) {
        return new $1(aIn);
    }

    public $1[] newArray(int aSize) {
        return new $1[aSize];
    }
};

public int describeContents() {
    return ${3:0};
}

public void writeToParcel(Parcel aOut, int aFlags) {
    $4
}
$0
endsnippet

snippet alc "Activity Lifecycle Callbacks" !b
public static class $1LifecycleCallbacks implements Application.ActivityLifecycleCallbacks {

    @Override
    public void onActivityCreated(Activity activity, Bundle bundle) {$2}

    @Override
    public void onActivityStarted(Activity activity) {$3}

    @Override
    public void onActivityResumed(Activity activity) {$4}

    @Override
    public void onActivityPaused(Activity activity) {$5}

    @Override
    public void onActivityStopped(final Activity activity) {$6}

    @Override
    public void onActivitySaveInstanceState(Activity activity, Bundle bundle) {$7}

    @Override
    public void onActivityDestroyed(final Activity activity) {$8}
}
endsnippet

snippet view "Composite View" b
package `!p snip.rv = pathToPackage(path, fn)`;

import android.content.Context;
import android.content.res.AttributeSet;
import android.support.v4.content.ContextCompat;
import android.view.*;
import android.widget.${1:LinearLayout};

public class $2 extends $1 {

    public $2(Context context) {
        super(context);
        init(context, null, 0);
    }

    public $2(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(context, attrs, 0);
    }

    public $2(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context, attrs, defStyleAttr);
    }

    private void init(Context context, AttributeSet attrs, int defStyleAttr) {

        setOrientation(LinearLayout.HORIZONTAL);
        setGravity(Gravity.CENTER_VERTICAL);

        LayoutInflater inflater = LayoutInflater.from(context);
        inflater.inflate(R.layout.view_$3, this, true);

        if (attrs == null) {
            TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.$2, defStyleAttr, 0);
            // get resources
            $0
            a.recycle();
        }
    }
}
endsnippet

# 1}}} #

# Dagger Modules {{{1 #

snippet module "Dagger Module" !b
package `!p snip.rv = pathToPackage(path, fn)`;

import dagger.*;

@Module(complete=false)
public class `!p snip.rv=fn[0:fn.find('.')]` {
    $0
}
endsnippet

snippet comp "Presenter Component"
package `!p snip.rv = pathToPackage(path, fn)`;

import dagger.BindsInstance;
import dagger.Component;

import com.enova.$1.ApplicationComponent;
import com.enova.$1.di.PresenterScope;

@PresenterScope
@Component(dependencies = ApplicationComponent.class)
public interface `!p snip.rv=fn[0:fn.find('.')]` {
    void inject($2Activity activity);

    @Component.Builder
    interface Builder {
        Builder applicationComponent(ApplicationComponent comp);
        @BindsInstance Builder $2View($2Contract.View $2View);
        LoginComponent build();
    }
}
endsnippet

snippet comp "Application Component" b

endsnippet

# 1}}} #

# MVP Helpers {{{ #

snippet contract "MVP Contract" b
package `!p snip.rv = pathToPackage(path, fn)`;

import com.enova.$1.base.BasePresenter;

public interface ${2:`!p snip.rv=fn[0:fn.find('.')]`} {

    public interface View {
        $3
    }

    public interface Presenter extends BasePresenter {
        $0
    }
}
endsnippet

snippet pre "MVP Presenter" b
package `!p snip.rv = pathToPackage(path, fn)`;

import timber.log.Timber;

import javax.inject.Inject;

import com.enova.$1.di.PresenterScope;

import com.enova.analytics.Analytics;

import static com.enova.validation.Validation.*;

@PresenterScope
public class ${2:`!p snip.rv=fn[0:fn.find('.')]`} implements $3Contract.Presenter {

    $3Contract.View  view;

    @Inject
    public $2($3Contract.View view, Analytics analytics) {
        this.view = view;
    }

    @Override
    public void start() {
        analytics.trackScreen("${4:$3 Screen}");
    }

    @Override
    public void stop() {

    }

    $0
}
endsnippet

# }}} MVP Helpers #

snippet jtc "Junit Test Case" !b 
package `!p snip.rv = pathToPackage(path, fn)`;

import android.support.test.runner.AndroidJUnit4;
import android.support.test.runner.AndroidJUnitRunner;
import android.support.test.rule.ActivityTestRule;

import org.junit.*;
import org.junit.runner.RunWith;

import android.support.test.espresso.Espresso.*;
import android.support.test.espresso.action.ViewActions.*;
import android.support.test.espresso.assertion.ViewAssertions.*;
import android.support.test.espresso.matcher.ViewMatchers.*;

@RunWith(AndroidJUnit4.class)
public class ${1:`!p snip.rv=fn[0:fn.find('.')]`} {

    @Rule
    public ActivityTestRule<${2:`!p snip.rv=re.sub(r'[Tt]ests?', '', fn[0:fn.find('.')])`}> mActivityRule = new ActivityTestRule<>($2.class, false, true);

    @Before
    public void setUp() throws Exception {
        super.setUp();
    }

    @Test
    public void test$0() {
    }

    @After
    public void tearDown() throws Exception {
        super.tearDown();
    }
}
endsnippet
